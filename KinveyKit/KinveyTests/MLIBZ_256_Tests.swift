//
//  MLIBZ_256_Tests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-04-30.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

class MLIBZ_256_Tests: XCTestCase {
    
    static let appId = "kid_-1WAs8Rh2"
    static let appSecret = "2f355bfaa8cb4f7299e914e8e85d8c98"
    
    var store: KCSCachedStore! = nil
    
    var resultsCache: [AnyObject]? = nil
    
    class MockURLProtocol: NSURLProtocol {
        
        override class func canInitWithRequest(request: NSURLRequest) -> Bool {
            return request.URL!.absoluteString! != "https://baas.kinvey.com/user/\(appId)/login"
        }
        
        override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
            return request
        }
        
        override func startLoading() {
            client!.URLProtocol(
                self,
                didFailWithError: NSError(
                    domain: NSURLErrorDomain,
                    code: Int(CFNetworkErrors.CFURLErrorTimedOut.rawValue),
                    userInfo: [
                        NSLocalizedDescriptionKey : NSURLErrorDomain,
                        NSLocalizedFailureReasonErrorKey : NSURLErrorDomain
                    ]
                )
            )
            client!.URLProtocolDidFinishLoading(self)
        }
        
    }
    
    override func setUp() {
        super.setUp()
        
        let clazz = MLIBZ_256_Tests.self
        
        KCSClient.sharedClient().initializeKinveyServiceForAppKey(
            clazz.appId,
            withAppSecret: clazz.appSecret,
            usingOptions: [
                KCSStoreKeyCachePolicy : KCSCachePolicy.LocalFirst.rawValue,
                KCSStoreKeyOfflineUpdateEnabled : true
            ]
        )
        
        class OfflineSaveDelegate: NSObject, KCSOfflineUpdateDelegate {
            
            private func shouldDeleteObject(objectId: String!, inCollection collectionName: String!, lastAttemptedDeleteTime time: NSDate!) -> Bool {
                return true
            }
            
            private func shouldEnqueueObject(objectId: String!, inCollection collectionName: String!, onError error: NSError!) -> Bool {
                return true
            }
            
            private func shouldSaveObject(objectId: String!, inCollection collectionName: String!, lastAttemptedSaveTime saveTime: NSDate!) -> Bool {
                return true
            }
            
        }
        
        let delegate = OfflineSaveDelegate()
        KCSClient.sharedClient().setOfflineDelegate(delegate)
        
        let expectationLogin = expectationWithDescription("login")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationLogin.fulfill()
            }
        )
        
        let expectationSave = expectationWithDescription("save")
        
        class Object : NSObject, KCSPersistable {
            
            dynamic var objectId: String?
            dynamic var hey: String?
            
            private override func hostToKinveyPropertyMapping() -> [NSObject : AnyObject]! {
                return [
                    "objectId" : KCSEntityKeyId,
                    "hey" : "hey"
                ]
            }
            
        }
        
        let collection = KCSCollection(fromString: "MyCollection", ofClass: NSMutableDictionary.self)
        store = KCSCachedStore(
            collection: collection,
            options: [
                KCSStoreKeyCachePolicy : KCSCachePolicy.LocalFirst.rawValue,
                KCSStoreKeyOfflineUpdateEnabled : true
            ]
        )
        
        var obj = Object()
        obj.hey = "there"
        
        store.saveObject(
            obj,
            withCompletionBlock: { (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
                XCTAssertNotNil(objectsOrNil)
                XCTAssertNil(errorOrNil)
                
                expectationSave.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        let expectationQuery = expectationWithDescription("query")
        
        //Caching the results
        store.queryWithQuery(
            KCSQuery(),
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(error)
                XCTAssertNotNil(results)
                
                self.resultsCache = results
                
                expectationQuery.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(60, handler: nil)
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
    }
    
    override func tearDown() {
        KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        
        super.tearDown()
    }
    
    func test() {
        let expectationQuery1 = expectationWithDescription("query1")
        
        store.queryWithQuery(
            KCSQuery(),
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(error)
                XCTAssertNotNil(results)
                
                if (self.resultsCache != nil) {
                    XCTAssertEqual(results.count, self.resultsCache!.count)
                    XCTAssertEqual(results as! [NSObject], self.resultsCache as! [NSObject])
                }
                
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, Int64(60 * NSEC_PER_SEC)), dispatch_get_main_queue(), { () -> Void in
                    expectationQuery1.fulfill()
                })
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(90, handler: nil)
        
        let expectationQuery2 = expectationWithDescription("query2")
        
        store.queryWithQuery(
            KCSQuery(),
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(error)
                XCTAssertNotNil(results)
                
                if (self.resultsCache != nil) {
                    XCTAssertEqual(results.count, self.resultsCache!.count)
                    XCTAssertEqual(results as! [NSObject], self.resultsCache as! [NSObject])
                }
                
                expectationQuery2.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(60, handler: nil)
    }

}
