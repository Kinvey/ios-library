//
//  MLIBZ_239_Tests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-04-17.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit

class MLIBZ_239_Tests: XCTestCase {
    
    override func setUp() {
        MLIBZ_239_DataHelper.instance()
        
        let expectationLogin = expectationWithDescription("login")
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationLogin.fulfill()
            }
        )
        waitForExpectationsWithTimeout(30, handler: nil)
    }
    
    func test() {
        let expectationSave = expectationWithDescription("save")
        let quote = MLIBZ_239_Quote()
        var error: NSError? = nil
        quote.originator = [ "_id" : KCSUser.activeUser().userId ]
        quote.reference = "Q524"
        MLIBZ_239_DataHelper.instance().saveQuote(
            quote,
            onSuccess: { (results: [AnyObject]!) -> Void in
                XCTAssertNotNil(results)
                
                expectationSave.fulfill()
            },
            onFailure: { (error: NSError!) -> Void in
                XCTFail()
                
                expectationSave.fulfill()
            }
        )
        waitForExpectationsWithTimeout(30, handler: nil)
        
        for index in 1...500 {
            let expectationQuery = expectationWithDescription("query")
            MLIBZ_239_DataHelper.instance().loadQuotesUseCache(
                true,
                containtSubstinrg: "Q524",
                onSuccess: { (results: [AnyObject]!) -> Void in
                    XCTAssertNotNil(results)
                    XCTAssertEqual(results.count, 1)
                    
                    expectationQuery.fulfill()
                },
                onFailure: { (error: NSError!) -> Void in
                    XCTFail()
                    
                    expectationQuery.fulfill()
                }
            )
            waitForExpectationsWithTimeout(30, handler: nil)
        }
    }
   
}
