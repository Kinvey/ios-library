//
//  KinveyTestCase.swift
//  KinveyKit
//
//  Created by Victor Hugo on 2016-11-02.
//  Copyright Â© 2016 Kinvey. All rights reserved.
//

import XCTest

class KinveyTestCase: XCTestCase {
    
    func setupClient() {
        KCSClient.sharedClient().initializeKinveyServiceForAppKey("appKey", withAppSecret: "appSecret", usingOptions: nil)
    }
    
    func createUser() {
        class MockURLProtocol: NSURLProtocol {
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                return true
            }
            
            override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
                return request
            }
            
            private override func startLoading() {
                let response = NSHTTPURLResponse(
                    URL: request.URL!,
                    statusCode: 200,
                    HTTPVersion: "1.1",
                    headerFields: [
                        "Content-Type" : "application/json; charset=utf-8"
                    ]
                )!
                client!.URLProtocol(
                    self,
                    didReceiveResponse: response,
                    cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
                )
                let responseBody = [
                    "_id" : "my-user-id",
                    "username" : "my-username",
                    "_kmd" : [
                        "lmt" : "2016-10-19T21:06:17.367Z",
                        "ect" : "2016-10-19T21:06:17.367Z",
                        "authtoken" : "5eba0099-0aa9-4b76-861e-29eb329712d6.jS639h+tTHiPhFUtU1RZxpH/srAiIk/cE96LDSuLbxY="
                    ],
                    "_acl" : [
                        "creator" : "5807e049b990b8b77b57ab3b"
                    ]
                ]
                let data = try! NSJSONSerialization.dataWithJSONObject(responseBody, options: [])
                client!.URLProtocol(self, didLoadData: data)
                client!.URLProtocolDidFinishLoading(self)
            }
            
            private override func stopLoading() {
            }
            
        }
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        defer {
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        }
        
        let expectationLogin = expectationWithDescription("Login")
        
        KCSUser.createAutogeneratedUser { (user, error, actionResult) in
            XCTAssertNotNil(user)
            XCTAssertNil(error)
            
            expectationLogin.fulfill()
        }
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        XCTAssertNotNil(KCSUser.activeUser())
    }
    
}
