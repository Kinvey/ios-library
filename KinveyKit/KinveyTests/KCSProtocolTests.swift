//
//  KCSProtocolTests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-04-24.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

class KCSProtocolTests: XCTestCase {
    
    var request: NSURLRequest?
    var exception: NSException?

    func testBaseURLProtocol() {
        
        class MockURLProtocol : NSURLProtocol {
            
            static var testCase: KCSProtocolTests!
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                testCase.request = request
                
                return false
            }
            
        }
        
        MockURLProtocol.testCase = self
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: [
                "KCS_HOST_PROTOCOL" : "http"
            ]
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let expectationCreateUser = expectationWithDescription("createUser")
        
        KCSTryCatch.try(
            { () -> Void in
                KCSUser.createAutogeneratedUser(
                    nil,
                    completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                        XCTFail()
                        
                        expectationCreateUser.fulfill()
                    }
                )
                XCTFail()
            },
            catch: { (exception: NSException!) -> Void in
                self.exception = exception
                XCTAssertNotNil(exception)
                
                expectationCreateUser.fulfill()
            },
            finally: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError!) -> Void in
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        })
        
        XCTAssertNil(request)
        XCTAssertNotNil(exception)
    }
    
    func testResponseContentType() {
        
        class MockURLProtocol : NSURLProtocol {
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                return true
            }
            
            override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
                return request
            }
            
            private override func startLoading() {
                let response = NSHTTPURLResponse(
                    URL: request.URL!,
                    statusCode: 200,
                    HTTPVersion: "1.1",
                    headerFields: [
                        "Content-Type" : "text/plain"
                    ]
                )!
                client!.URLProtocol(
                    self,
                    didReceiveResponse: response,
                    cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
                )
                client!.URLProtocol(self, didLoadData: "test".dataUsingEncoding(NSUTF8StringEncoding)!)
                client!.URLProtocolDidFinishLoading(self)
            }
            
        }
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let expectationCreateUser = expectationWithDescription("createUser")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNil(user)
                XCTAssertNotNil(error)
                
                expectationCreateUser.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError!) -> Void in
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        })
    }
    
    func testWrongJsonRootType() {
        
        class MockURLProtocol : NSURLProtocol {
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                return true
            }
            
            override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
                return request
            }
            
            private override func startLoading() {
                let response = NSHTTPURLResponse(
                    URL: request.URL!,
                    statusCode: 200,
                    HTTPVersion: "1.1",
                    headerFields: [
                        "Content-Type" : "application/json"
                    ]
                )!
                client!.URLProtocol(
                    self,
                    didReceiveResponse: response,
                    cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
                )
                client!.URLProtocol(self, didLoadData: "[]".dataUsingEncoding(NSUTF8StringEncoding)!)
                client!.URLProtocolDidFinishLoading(self)
            }
            
        }
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let expectationCreateUser = expectationWithDescription("createUser")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNil(user)
                XCTAssertNotNil(error)
                
                expectationCreateUser.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError!) -> Void in
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        })
    }
    
    func testIdMissing() {
        
        class MockURLProtocol : NSURLProtocol {
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                return true
            }
            
            override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
                return request
            }
            
            private override func startLoading() {
                let user = [
                    "name" : "Kinvey2"
                ]
                let data = NSJSONSerialization.dataWithJSONObject(user, options: NSJSONWritingOptions.allZeros, error: nil)!
                
                let response = NSHTTPURLResponse(
                    URL: request.URL!,
                    statusCode: 200,
                    HTTPVersion: "1.1",
                    headerFields: [
                        "Content-Type" : "application/json",
                        "Content-Length" : String(data.length)
                    ]
                )!
                client!.URLProtocol(
                    self,
                    didReceiveResponse: response,
                    cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
                )
                client!.URLProtocol(self, didLoadData: data)
                client!.URLProtocolDidFinishLoading(self)
            }
            
        }
        
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let collection = KCSCollection(fromString: "company", ofClass: NSMutableDictionary.self)
        let store = KCSLinkedAppdataStore(collection: collection, options: nil)
        
        let expectationCreateUser = expectationWithDescription("createUser")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationCreateUser.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        
        let expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [
                "name" : "Kinvey"
            ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(results)
                XCTAssertNotNil(error)
                XCTAssertEqual(error.localizedDescription, "KCSPersistable objects requires the `\(KCSEntityKeyId)` property")
                
                expectationSave.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError!) -> Void in
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        })
    }
    
    func testIdNotString() {
        
        class MockURLProtocol : NSURLProtocol {
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                return true
            }
            
            override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
                return request
            }
            
            private override func startLoading() {
                let user = [
                    KCSEntityKeyId : 123,
                    "name" : "Kinvey2"
                ]
                let data = NSJSONSerialization.dataWithJSONObject(user, options: NSJSONWritingOptions.allZeros, error: nil)!
                
                let response = NSHTTPURLResponse(
                    URL: request.URL!,
                    statusCode: 200,
                    HTTPVersion: "1.1",
                    headerFields: [
                        "Content-Type" : "application/json",
                        "Content-Length" : String(data.length)
                    ]
                    )!
                client!.URLProtocol(
                    self,
                    didReceiveResponse: response,
                    cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
                )
                client!.URLProtocol(self, didLoadData: data)
                client!.URLProtocolDidFinishLoading(self)
            }
            
        }
        
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let collection = KCSCollection(fromString: "company", ofClass: NSMutableDictionary.self)
        let store = KCSLinkedAppdataStore(collection: collection, options: nil)
        
        let expectationCreateUser = expectationWithDescription("createUser")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationCreateUser.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        
        let expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [
                "name" : "Kinvey"
            ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(results)
                XCTAssertNotNil(error)
                XCTAssertEqual(error.localizedDescription, "`\(KCSEntityKeyId)` property needs to be string")
                
                expectationSave.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError!) -> Void in
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        })
    }
    
    func testKmdMissing() {
        
        class MockURLProtocol : NSURLProtocol {
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                return true
            }
            
            override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
                return request
            }
            
            private override func startLoading() {
                let user = [
                    KCSEntityKeyId : "123",
                    "name" : "Kinvey2"
                ]
                let data = NSJSONSerialization.dataWithJSONObject(user, options: NSJSONWritingOptions.allZeros, error: nil)!
                
                let response = NSHTTPURLResponse(
                    URL: request.URL!,
                    statusCode: 200,
                    HTTPVersion: "1.1",
                    headerFields: [
                        "Content-Type" : "application/json",
                        "Content-Length" : String(data.length)
                    ]
                    )!
                client!.URLProtocol(
                    self,
                    didReceiveResponse: response,
                    cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
                )
                client!.URLProtocol(self, didLoadData: data)
                client!.URLProtocolDidFinishLoading(self)
            }
            
        }
        
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let collection = KCSCollection(fromString: "company", ofClass: NSMutableDictionary.self)
        let store = KCSLinkedAppdataStore(collection: collection, options: nil)
        
        let expectationCreateUser = expectationWithDescription("createUser")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationCreateUser.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        
        let expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [
                "name" : "Kinvey"
            ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(results)
                XCTAssertNotNil(error)
                XCTAssertEqual(error.localizedDescription, "KCSPersistable objects requires the `\(KCSEntityKeyMetadata)` property")
                
                expectationSave.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError!) -> Void in
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        })
    }
    
    func testKmdLmtMissing() {
        
        class MockURLProtocol : NSURLProtocol {
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                return true
            }
            
            override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
                return request
            }
            
            private override func startLoading() {
                let user = [
                    KCSEntityKeyId : "123",
                    KCSEntityKeyMetadata : [
                        "ect": "2013-03-14T15:55:00.329Z"
                    ],
                    "name" : "Kinvey2"
                ]
                let data = NSJSONSerialization.dataWithJSONObject(user, options: NSJSONWritingOptions.allZeros, error: nil)!
                
                let response = NSHTTPURLResponse(
                    URL: request.URL!,
                    statusCode: 200,
                    HTTPVersion: "1.1",
                    headerFields: [
                        "Content-Type" : "application/json",
                        "Content-Length" : String(data.length)
                    ]
                    )!
                client!.URLProtocol(
                    self,
                    didReceiveResponse: response,
                    cacheStoragePolicy: NSURLCacheStoragePolicy.NotAllowed
                )
                client!.URLProtocol(self, didLoadData: data)
                client!.URLProtocolDidFinishLoading(self)
            }
            
        }
        
        let config = KCSClientConfiguration(
            appKey: "kid_-1WAs8Rh2",
            secret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            options: nil
        )
        KCSClient.sharedClient().initializeWithConfiguration(config)
        
        let collection = KCSCollection(fromString: "company", ofClass: NSMutableDictionary.self)
        let store = KCSLinkedAppdataStore(collection: collection, options: nil)
        
        let expectationCreateUser = expectationWithDescription("createUser")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                expectationCreateUser.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        
        let expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            [
                "name" : "Kinvey"
            ],
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertNil(results)
                XCTAssertNotNil(error)
                XCTAssertEqual(error.localizedDescription, "KCSPersistable objects requires the `\(KCSEntityKeyMetadata).\(KCSEntityKeyMetadataLastModificationTime)` property")
                
                expectationSave.fulfill()
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError!) -> Void in
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        })
    }

}
