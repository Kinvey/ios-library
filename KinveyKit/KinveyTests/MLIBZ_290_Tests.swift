//
//  MLIBZ_290_Tests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-05-08.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import XCTest

class MLIBZ_290_Tests: XCTestCase {

    override func setUp() {
        super.setUp()
        
        KCSClient.sharedClient().initializeKinveyServiceForAppKey(
            "kid_-1WAs8Rh2",
            withAppSecret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            usingOptions: nil
        )
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func test() {
        let expectationLogin = expectationWithDescription("login")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                expectationLogin.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
        
        class OfflineUpdateDelegate : NSObject, KCSOfflineUpdateDelegate {
            
            private func shouldDeleteObject(objectId: String!, inCollection collectionName: String!, lastAttemptedDeleteTime time: NSDate!) -> Bool {
                return true
            }
            
            private func shouldEnqueueObject(objectId: String!, inCollection collectionName: String!, onError error: NSError!) -> Bool {
                return true
            }
            
            private func shouldSaveObject(objectId: String!, inCollection collectionName: String!, lastAttemptedSaveTime saveTime: NSDate!) -> Bool {
                return true
            }
            
        }
        
        let delegate = OfflineUpdateDelegate()
        KCSClient.sharedClient().setOfflineDelegate(delegate)
        
        let collection = KCSCollection(fromString: "city", ofClass: City.self)
        let store = KCSLinkedAppdataStore(
            collection: collection,
            options: [
                KCSStoreKeyOfflineUpdateEnabled : true
            ]
        )
        
        class MockURLProtocol : NSURLProtocol {
            
            static var putRequests: [NSURLRequest] = []
            
            override class func canInitWithRequest(request: NSURLRequest) -> Bool {
                NSLog("%@ %@", request.HTTPMethod!, request.URL!)
                if request.HTTPMethod == "PUT" {
                    putRequests.append(request)
                }
                return request.HTTPMethod == "POST"
            }
            
            override class func canonicalRequestForRequest(request: NSURLRequest) -> NSURLRequest {
                return request
            }
            
            private override func startLoading() {
                let error = NSError(
                    domain: NSURLErrorDomain,
                    code: NSURLErrorNotConnectedToInternet,
                    userInfo: [
                        NSLocalizedDescriptionKey : "The connection failed because the device is not connected to the internet."
                    ]
                )
                client!.URLProtocol(self, didFailWithError: error)
            }
            
        }
        
        KCSURLProtocol.registerClass(MockURLProtocol.self)
        
        let expectationSave = expectationWithDescription("save")
        
        store.saveObject(
            City(name: "Boston"),
            withCompletionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                dispatch_after(
                    dispatch_time(DISPATCH_TIME_NOW, Int64(30 * NSEC_PER_SEC)),
                    dispatch_get_main_queue(),
                    { () -> Void in
                        expectationSave.fulfill()
                    }
                )
            },
            withProgressBlock: nil
        )
        
        waitForExpectationsWithTimeout(90, handler: { (error: NSError!) -> Void in
            KCSURLProtocol.unregisterClass(MockURLProtocol.self)
        })
        
        XCTAssertEqual(MockURLProtocol.putRequests.count, 0)
    }

}
