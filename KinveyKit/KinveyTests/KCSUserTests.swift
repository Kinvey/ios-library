//
//  KCSUserTests.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-08-10.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

class KCSUserTests: XCTestCase {

    override func setUp() {
        super.setUp()
        
        KCSClient.sharedClient().initializeKinveyServiceForAppKey(
            "kid_-1WAs8Rh2",
            withAppSecret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            usingOptions: nil
        )
    }
    
    override func tearDown() {
        KCSUser.activeUser()?.logout()
        
        super.tearDown()
    }

    func testCreateAutogeneratedUser() {
        weak var expectationCreate = expectationWithDescription("create")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertTrue(NSThread.isMainThread())
                
                expectationCreate?.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: nil)
    }
    
    func createUser() {
        weak var expectationCreate = expectationWithDescription("create")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNotNil(user)
                XCTAssertNil(error)
                
                XCTAssertTrue(NSThread.isMainThread())
                
                expectationCreate?.fulfill()
            }
        )
        
        waitForExpectationsWithTimeout(30, handler: { (error: NSError!) -> Void in
            expectationCreate = nil
        })
    }
    
    func testRefreshUser() {
        createUser()
        
        if let user = KCSUser.activeUser() {
            weak var expectationRefresh = expectationWithDescription("refresh")
            
            user.refreshFromServer { (result: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertTrue(NSThread.isMainThread())
                
                expectationRefresh?.fulfill()
            }
            
            waitForExpectationsWithTimeout(30, handler: nil)
        }
    }
    
    func testChangePassword() {
        createUser()
        
        if let user = KCSUser.activeUser() {
            weak var expectationChangePassword = expectationWithDescription("changePassword")
            
            user.changePassword(
                "1234",
                completionBlock: { (results: [AnyObject]!, error: NSError!) -> Void in
                    XCTAssertTrue(NSThread.isMainThread())
                    
                    expectationChangePassword?.fulfill()
                }
            )
            
            waitForExpectationsWithTimeout(30, handler: nil)
        }
    }
    
    func testSaveUser() {
        createUser()
        
        if let user = KCSUser.activeUser() {
            weak var expectationSaveUser = expectationWithDescription("saveUser")
            
            user.saveWithCompletionBlock { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertTrue(NSThread.isMainThread())
                
                expectationSaveUser?.fulfill()
            }
            
            waitForExpectationsWithTimeout(30, handler: nil)
        }
    }
    
    func testDeleteUser() {
        createUser()
        
        if let user = KCSUser.activeUser() {
            weak var expectationDeleteUser = expectationWithDescription("deleteUser")
            
            user.removeWithCompletionBlock { (results: [AnyObject]!, error: NSError!) -> Void in
                XCTAssertTrue(NSThread.isMainThread())
                
                expectationDeleteUser?.fulfill()
            }
            
            waitForExpectationsWithTimeout(30, handler: nil)
        }
    }

}
