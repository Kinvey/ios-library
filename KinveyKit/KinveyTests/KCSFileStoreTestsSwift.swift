//
//  KCSFileStoreTestsSwift.swift
//  KinveyKit
//
//  Created by Victor Barros on 2015-07-10.
//  Copyright (c) 2015 Kinvey. All rights reserved.
//

import UIKit
import XCTest

class KCSFileStoreTestsSwift: XCTestCase {

    override func setUp() {
        super.setUp()
        
        KCSClient.sharedClient().initializeKinveyServiceForAppKey(
            "kid_-1WAs8Rh2",
            withAppSecret: "2f355bfaa8cb4f7299e914e8e85d8c98",
            usingOptions: nil
        )
        
        weak var expectationLogin = expectationWithDescription("login")
        
        KCSUser.createAutogeneratedUser(
            nil,
            completion: { (user: KCSUser!, error: NSError!, actionResult: KCSUserActionResult) -> Void in
                XCTAssertNil(error)
                XCTAssertNotNil(user)
                
                expectationLogin?.fulfill()
        })
        
        waitForExpectationsWithTimeout(30, handler: nil)
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func testUpload2Https() {
        weak var expectationUpload = expectationWithDescription("upload")
        var file: KCSFile? = nil
        
        let url = NSBundle(forClass: self.dynamicType).URLForResource("mavericks", withExtension: "jpg")
        KCSFileStore.uploadFile(
            url,
            options: nil,
            completionBlock: { (_file: KCSFile!, error: NSError!) -> Void in
                file = _file
                
                XCTAssertNil(error)
                XCTAssertNotNil(_file)
                
                if let file = _file {
                    XCTAssertEqual("https", file.remoteURL.scheme!)
                }
                
                XCTAssertTrue(NSThread.isMainThread())
                
                expectationUpload?.fulfill()
            },
            progressBlock: nil
        )
        
        waitForExpectationsWithTimeout(60, handler: nil)
    }

}
