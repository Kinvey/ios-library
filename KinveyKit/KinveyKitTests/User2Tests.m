//
//  User2Tests.m
//  KinveyKit
//
//  Created by Michael Katz on 12/11/13.
//  Copyright (c) 2013 Kinvey. All rights reserved.
//
// This software is licensed to you under the Kinvey terms of service located at
// http://www.kinvey.com/terms-of-use. By downloading, accessing and/or using this
// software, you hereby accept such terms of service  (and any agreement referenced
// therein) and agree that you have read, understand and agree to be bound by such
// terms of service and are of legal age to agree to such terms with Kinvey.
//
// This software contains valuable confidential and proprietary information of
// KINVEY, INC and is subject to applicable licensing agreements.
// Unauthorized reproduction, transmission or distribution of this file and its
// contents is a violation of applicable laws.
//


#import <SenTestingKit/SenTestingKit.h>

#import "KinveyUserService.h"
#import "TestUtils2.h"
#import "KinveyCoreInternal.h"

@interface User2Tests : SenTestCase

@end

@implementation User2Tests

- (void)setUp
{
    [super setUp];
    [self setupKCS:NO];
}

- (void)tearDown
{
    [super tearDown];
}

- (void) testAutoBasic
{
    self.done = NO;
    __block id createdUser = nil;
    [KCSUser2 createAutogeneratedUser:nil completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should have a user");
        STAssertTrue([user isKindOfClass:[KCSUser2 class]], @"should be a user object");
        createdUser = user;
        self.done = YES;
    }];
    [self poll];
    
    id activeUser = [KCSUser2 activeUser];
    STAssertNotNil(activeUser, @"should have an activeUser");
    STAssertEqualObjects(activeUser, createdUser, @"should match the created user");
}

- (void) testAutoOptions
{
    self.done = NO;
    __block id createdUser = nil;
    [KCSUser2 createAutogeneratedUser:@{KCSUserAttributeGivenname : @"Fred",
                                        KCSUserAttributeSurname : @"Fredson",
                                        KCSUserAttributeEmail : @"fred@fredson.com"
                                        } completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should have a user");
        STAssertTrue([user isKindOfClass:[KCSUser2 class]], @"should be a user object");
        createdUser = user;
        self.done = YES;
    }];
    [self poll];
    
    KCSUser2* activeUser = [KCSUser2 activeUser];
    STAssertNotNil(activeUser, @"should have an activeUser");
    STAssertEqualObjects(activeUser, createdUser, @"should match the created user");
    STAssertEqualObjects(activeUser.email, @"fred@fredson.com", @"should be set");
    STAssertEqualObjects(activeUser.surname, @"Fredson", @"should be set");
    STAssertEqualObjects(activeUser.givenName, @"Fred", @"should be set");
}

- (void) testNamedBasic
{
    self.done = NO;
    __block id createdUser = nil;
    NSString* uname = [NSString UUID];
    NSString* password = [NSString UUID];
    [KCSUser2 createUserWithUsername:uname password:password fieldsAndValues:nil completion:^(id<KCSUser2> user, NSError *error) {
        KTAssertNoError
        STAssertNotNil(user, @"should have a user");
        STAssertTrue([user isKindOfClass:[KCSUser2 class]], @"should be a user object");
        createdUser = user;
        self.done = YES;
    }];
    [self poll];
    
    id activeUser = [KCSUser2 activeUser];
    STAssertNotNil(activeUser, @"should have an activeUser");
    STAssertEqualObjects(activeUser, createdUser, @"should match the created user");
    STAssertEqualObjects([activeUser username], uname, @"usernames should match");
    
    STAssertTrue([KCSUser2 hasSavedCredentials], @"yes, please");
}

- (void) testNamedOptions
{
    self.done = NO;
    __block id createdUser = nil;
    NSString* uname = [NSString UUID];
    NSString* password = [NSString UUID];
    [KCSUser2 createUserWithUsername:uname password:password fieldsAndValues:@{KCSUserAttributeGivenname : @"Fred",
                                        KCSUserAttributeSurname : @"Fredson",
                                        KCSUserAttributeEmail : @"fred@fredson.com"
                                        } completion:^(id<KCSUser2> user, NSError *error) {
                                            KTAssertNoError
                                            STAssertNotNil(user, @"should have a user");
                                            STAssertTrue([user isKindOfClass:[KCSUser2 class]], @"should be a user object");
                                            createdUser = user;
                                            self.done = YES;
                                        }];
    [self poll];
    
    KCSUser2* activeUser = [KCSUser2 activeUser];
    STAssertNotNil(activeUser, @"should have an activeUser");
    STAssertEqualObjects(activeUser, createdUser, @"should match the created user");
    STAssertEqualObjects(activeUser.email, @"fred@fredson.com", @"should be set");
    STAssertEqualObjects(activeUser.surname, @"Fredson", @"should be set");
    STAssertEqualObjects(activeUser.givenName, @"Fred", @"should be set");
    STAssertEqualObjects([activeUser username], uname, @"usernames should match");
    
    STAssertTrue([KCSUser2 hasSavedCredentials], @"yes, please");
}

@end
