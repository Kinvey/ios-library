Kinvey iOS Library User Guide
=============================


== Getting Started (First Steps) ==

Adding KinveyKit to your library is really simple:

1. Drag KinveyKit.framework into your project.
2. Copy the Airship folder to your project directory and add libUAirship-1.1.1.a to the 'Link Binary With Libraries'
3. Add the following libraries to your 'Link Binary With Libraries' section of your project:

* CFNetwork.framework
* CoreGraphics.framework
* Foundation.framework
* MobileCoreServices.framework
* Security.framework
* SystemConfiguration.framework
* UIKit.framework
* libz.dylib
* libsqlite3.dylib
* StoreKit.framework
* CoreTelephony.framework

4. Fix a linker bug by adding '-ObjC' to the 'Other Linker Flags' of the 'Build Settings' page.

After adding Kinvey to your project a single call in your app delegate is required to register with the Kinvey service (make sure to '#import <KinveyKit/KinveyKit.h>' first):

[source, objc]
----
    [[KCSClient sharedClient] initializeKinveyServiceForAppKey:@"<app Key>"
                                                 withAppSecret:@"<App Secret>"
                                                  usingOptions:nil];
----

You can now jump to any other section and start building amazing apps.

=== Options For Setting up Kinvey ===
==== Push ====
==== Network ====

=== Setting up Push Notifications ===

Setting up Push Notifications takes a little more work, but not too much.  Make sure you've signed up for Push Notifications on the console and read the necessary background documents before doing this process.

Once you've decided to use Push Notifications, you'll be given a production key/secret and a development key/secret pair to use with the service.  You provide these to Kinvey through the options interface (TBD).

You'll need to call onLoad: with your options, then register and receive notifications in the appropriate places.  You'll also need to tell us when your applicaiton is terminating so we can do some clean-up on our end.

=== Library Overview ===

Here are a couple of other notes that will help you understand and effectivly use the Kinvey Service.

* Asynchronous

The Kinvey iOS library is an Asynchronous library.  There are ways to obtain information in a synchronous fashion, however these methods are not the primary interface.  The key thing to remember when using an Asynchronous library is that you cannot be sure when events will happen, but instead tell the library what to do once they are complete.

The asynchronous manner of this library means that a shift in thinking is required to fully understand interacting with the library.

Instead of:

1. Get user input
2. Update model
3. Update view

the sequence becomes:

1. Get user input
2. Submit request to update model, scheduling an update for on complete.

While this seems like a small change, it's important to observe how the following pseudo code works.

Assume that you have a table view and are using Kinvey to store your data model in the cloud.  You write a routine, called refreshData which pulls all list names down from Kinvey (and logs them to the console).  You also have a routine called saveData that upload a list name to Kinvey (Kinvey provides these routines for you, but we're defining these here for our simple example).

If you call:
[source,c]
----
saveData("one")
saveData("two")
saveData("three")
refreshData()
saveData("four")
refreshData()
----

You may expect to see the following in your console:
----
one
two
three
one
two
three
four
----

This probably will not happen, as the asychronous library cannot ensure that the first three saveData() calls have completed before the refreshData is executed.  You may see any number of strings printed with each refreshData.  You may see no strings printed at all.

We use the delegate pattern to help you manage when things happen.  Every call to kinvey informs a delegate when it has completed or failed.  To handle the above sequence you would implement a method called something like actionDidComplete, and in action did complete you would call refreshData() when the delegate thinks enough of the saveData() calls had completed.

A good understanding of Cocoa, iOS and Objective-C design patterns will help you to use Kinvey in the most effective means possible.

See Apple's http://developer.apple.com/library/IOs/#documentation/iPhone/Conceptual/iPhone101/Articles/02_DesignPatterns.html[Understanding Fundamental Design Patterns] for more information.  

== Using the Kinvey Data Service ==

The Kinvey Data service is used to store your Objective-C or any Key-Valued data up in the cloud.


=== Basic Concepts ===

TBD

=== Persisting Data ===

You can persist any Objective-C class in your application, you only need to do three things to mark a class for saving to the Kinvey service:

* '#include <KinveyKit/KinveyKit.h>'
* Indicate that you implement the KCSPersistable protocol
[source, objc]
----
@interface MyClass : NSObject <KCSPersistable>
----
* Override the 'propertyToElementMapping' method
[source, objc]
----
- (NSDictionary *)propertyToElementMapping
{
	return [NSDictionary dictionaryWithObjectsAndKeys:
                        @"userName", @"userName",
                        @"playerAge", @"playerAge",
                        @"_id", @"kinveyId", nil];
}
----

Defining this mapping is critical to the performance of your application, you must include all members of your Objective-C class that you want stored on Kinvey and you must not include any member that you do not want stored.  Typically names should be the same for both, but if they are different, the keys of the dictionary are the members in your Objective-C class and the values for those keys are the JSON property names that represent the names on Kinvey.  One member must mapped to "_id" and is used to uniquely represent this instance on Kinvey.

To physically store an object into Kinvey call the 'persistDelegate:toCollection:' on your object.

For example:
[source,objc]
----
[myObject persistDelegate:self
             toCollection:[[KCSClient sharedClient]
                            collectionFromName:@"object-collection"
                                     withClass:[myObject class]]];
----

The 'persistDidComplete' message is sent to the delegate to notify of completion, all actions you want performed on completion should be handled there.

The 'persistDidFail' message is sent to the delegate to notify of failure.


=== Fetching Data ===

There are two ways to fetch data, fetching an entire collection or fetching items that match a query.

To fetch all items from a collection call 'fetchDelegateFetchAll:' on the collection.

For example:

[source,objc]
----
[myCollection fetchDelegateFetchAll:self];
----

To fetch the items matching a query call 'fetchDelegateFetch:' on the collection.

For example:

[source,objc]
----
[myCollection fetchDelegateFetch:self];
----

Both routines inform their delegate of completion by calling 'fetchDelegateDidComplete' and
'fetchDelegateDidFail'.  You are required to implement these methods.

=== Deleting Data ===

Deleting objects is simple, you just need to know the collection that you wish to delete the entity from.  If you have a collection, let's say 'myObjectCollection', object and you wish to delete an item, say 'myItem', use the following code:

[source,objc]
----
[myItem deleteDelegate:self fromCollection:myObjectCollection];
----

=== Querying Data ===

TBD

=== Design Notes ===

* If you're referencing collections from other collections, you may wish to delete excess objects from referenced collections.  Since there is no facility to automatically delete via a query at the present time, a simple way to perform this action is to make a custom delete help class that is your persist delegate.  In the 'fetchDidComplete' method, iterate over all of the results, calling their 'deleteDelegate:fromCollection:' method.

* The fetch methods against Kinvey use the phone's data service, so avoid over fetching data.  They can also take a long time to complete, so try to maximize the amount of work that you can do between fetches.

* Persisting objects (as it happens in the background) is relatively quick and can be done when necessary, however, again be mindful of the user's data plan and try not to persist data that is unnecessary.

== Using the Kinvey Resource Service ==



=== Introduction ===

All resource service methods are class methods, as they do not rely on a collection. All resource actions return a KCSResourceResponse.

=== Saving Resources ===

To save a file to the Kinvey Resource service use 'saveLocalResource:withDelegate:', if you
need to specify a name to store the file as, use 'saveLocalResource:toResource:withDelegate:'.

For example:
[source,objc]
----
[KCSResourceService saveLocalResource:@"mugshot.png" withDelegate:self];
[KCSResourceService saveLocalResource:@"Fabio.png" toResource:@"myPhoto.png" withDelegate:self];
----

In the first call, 'mugshot.png' is saved to Kinvey as 'mugshot.png', in the second call, 'Fabio.png' is saved as 'myPhoto.png' to Kinvey.

If you have an NSData object that you wish to store to Kinvey, use 'saveData:toResource:withDelegate:'.

For example:
[source,objc]
----
[KCSResourceService saveData:myNSDataFromAnMP3 toResource:@"mySong.mp3" withDelegate:self];
----

All save methods invoke the 'resourceServiceDidCompleteWithResult:' method to indicate completion
with success and invoke the 'resourceServiceDidFailWithError:' method to indicate faiure.

=== Downloading Resources ===

To download a resource to a file use 'downloadResource:toFile:withResourceDelegate:', to download to an NSData object (given to the delegate in the KCSResourceResponse) use 'downloadResource:withResourceDelegate:'

For example:
[source,objc]
----
[KCSResourceService downloadResource:@"mugshot.png" withResourceDelegate:self];
[KCSResourceService downloadResource:@"mugshot.png" toFile:@"ryan.png" withResourceDelegate:self];
----

The first call downloads mugshot.png to an NSData object given to the delegate in the KCSResourceResponse argument to 'resourceServiceDidCompleteWithResult'.  In the second call the resource 'mugshot.png' is downloaded to 'ryan.png'.  Should anything go wrong, resourceServiceDidFailWithError is invoked on the delegate.

To obtain a URL to stream the resource from Kinvey, use the 'getStreamingURLForResource:withResourceDelegate:' method.

For example:

[source,objc]
----
[KCSResourceService getStreamingURLForResource:@"BigMovie.m4v" withResourceDelegate:self];
----

If the URL is fetched then it is returned in the KCSResourceResponse that gets passed to the delegate via the 'resourceServiceDidCompleteWithResult' method.  The URL value passed back is time limited for around 30 seconds, you must use it or refetch the URL.

Should anything go wrong, the 'resourceServiceDidFailWithError' method is invoked on the delegate.

=== Deleting Resources ===

To remove a resource, simple call the 'deleteResource:withDelegate:' method giving the resource name.

For example:

[source,objc]
----
[KCSResourceService deleteResource:@"mySong.mp3" withDelegate:self];
----

If everthing goes ok, the resourceServiceDidCompleteWithResult will be invoked on the delegate, otherwise the resourceServiceDidFailWithError will be invoked on the delegate.

=== Design Notes ===


